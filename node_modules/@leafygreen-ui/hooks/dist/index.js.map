{"version":3,"file":"index.js","sources":["../src/useEventListener.ts","../src/useViewportSize.ts","../src/usePoller.ts","../src/useEscapeKey.ts","../src/useIsomorphicLayoutEffect.ts","../src/useMutationObserver.ts","../src/useObjectDependency.ts","../src/usePrevious.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport interface UseEventOptions {\n  options?: Omit<AddEventListenerOptions, 'once'>;\n  dependencies?: Array<any>;\n  enabled?: boolean | 'once';\n  element?: Document | HTMLElement;\n}\n\n/**\n * Hook to subscribe to an event listener.\n * @param type Represents the event type to listen for.\n * @param eventCallback Event listener callback function.\n * @param optional Optional third argument passed to function with implementation specifications\n * @param optional.options Parameter to specify options passed to the eventListener.\n * @param optional.enabled Determines whether or not the useEffect hook should run.\n * @param optional.dependencies Array to be passed to useEffect hook, such that the hook will only run if the array's values have changed.\n * @param optional.element Value to be passed as target of event handler, will default to document.\n */\nexport default function useEventListener<Type extends keyof DocumentEventMap>(\n  type: Type,\n  eventCallback: (e: DocumentEventMap[Type]) => void,\n  {\n    options,\n    enabled = true,\n    dependencies = [enabled, type],\n    element,\n  }: UseEventOptions = {},\n) {\n  const memoizedEventCallback: React.MutableRefObject<\n    (e: DocumentEventMap[Type]) => void\n  > = useRef(() => {});\n\n  useEffect(() => {\n    memoizedEventCallback.current = eventCallback;\n  }, [eventCallback]);\n\n  useEffect(() => {\n    if (enabled === false) {\n      return;\n    }\n\n    // Handle this in case non-TypeScript users pass in the wrong value\n    if (enabled !== 'once' && enabled !== true) {\n      console.error(\n        `Received value of type ${typeof enabled} for property \\`enabled\\`. Expected a boolean.`,\n      );\n      return;\n    }\n\n    const callback = (e: DocumentEventMap[Type]) =>\n      memoizedEventCallback.current(e);\n\n    const eventListenerOptions = {\n      ...options,\n      once: enabled === 'once',\n    };\n    // NOTE(JeT): I'm pretty sure there should be a way to avoid this type assertion, but I couldn't figure it out.\n    (element ?? document).addEventListener(\n      type,\n      callback as EventListener,\n      eventListenerOptions,\n    );\n\n    return () => {\n      (element ?? document).removeEventListener(\n        type,\n        callback as EventListener,\n        eventListenerOptions,\n      );\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n}\n","import { useEffect, useState } from 'react';\nimport debounce from 'lodash/debounce';\n\ninterface ViewportSize {\n  width: number;\n  height: number;\n}\n\nfunction getViewportSize(): ViewportSize {\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight,\n  };\n}\n\nexport default function useViewportSize(): ViewportSize | null {\n  const [viewportSize, setViewportUpdateVal] = useState<ViewportSize | null>(\n    null,\n  );\n\n  useEffect(() => {\n    setViewportUpdateVal(getViewportSize());\n\n    const calcResize = debounce(\n      () => setViewportUpdateVal(getViewportSize()),\n      100,\n    );\n\n    window.addEventListener('resize', calcResize);\n\n    return () => window.removeEventListener('resize', calcResize);\n  }, []);\n\n  return viewportSize;\n}\n","import { useState, useRef, useEffect } from 'react';\nimport useEventListener from './useEventListener';\n\nfunction useVisibilityChange() {\n  const isVisibilityStateVisible = () => document.visibilityState === 'visible';\n\n  const [isVisible, setIsVisible] = useState(true);\n\n  useEffect(() => {\n    setIsVisible(isVisibilityStateVisible);\n  }, []);\n\n  useEventListener('visibilitychange', () => {\n    setIsVisible(isVisibilityStateVisible);\n  });\n\n  return isVisible;\n}\n\ntype OnPoll = () => void;\n\ninterface PollerOptions {\n  /**\n   * How frequently should we call the onPoll handler. Defaults to 30 seconds.\n   * @default 30000\n   */\n  interval?: number;\n\n  /**\n   * Should we immediately trigger the onPoll handler.\n   * @default true\n   */\n  immediate?: boolean;\n\n  /**\n   * Should we be polling.\n   * @default true\n   */\n  enabled?: boolean;\n}\n\nexport default function usePoller(\n  onPoll: OnPoll,\n  { interval = 30e3, immediate = true, enabled = true }: PollerOptions = {},\n) {\n  const savedCallback = useRef<OnPoll>();\n  const isVisible = useVisibilityChange();\n\n  const isPolling = isVisible && enabled;\n\n  useEffect(() => {\n    savedCallback.current = onPoll;\n  });\n\n  useEffect(() => {\n    if (!isPolling) {\n      return;\n    }\n\n    // Using this reflection to get return type of setTimeout so we don't have to\n    // use window.setTimeout, makes this more cross-environment compatible\n    // Sourced from: https://stackoverflow.com/a/51040768\n    let id: ReturnType<typeof setTimeout>;\n\n    function scheduleNextPoll() {\n      unscheduleNextPoll();\n      id = setTimeout(poll, interval);\n    }\n\n    function unscheduleNextPoll() {\n      clearTimeout(id);\n    }\n\n    function poll() {\n      Promise.resolve(savedCallback.current?.()).finally(scheduleNextPoll);\n    }\n\n    if (immediate) {\n      poll();\n    } else {\n      scheduleNextPoll();\n    }\n\n    return unscheduleNextPoll;\n  }, [interval, immediate, isPolling]);\n}\n","import useEventListener, { UseEventOptions } from './useEventListener';\n\nconst escapeKeyCode = 27;\n\nconst handleEscape = (e: KeyboardEvent, callback: () => void) => {\n  if (e.keyCode === escapeKeyCode) {\n    e.stopImmediatePropagation();\n    callback();\n  }\n};\n\n/**\n * Hook to subscribe to an escape-key-press.\n * @param callback Callback function to be executed when Escape key is pressed.\n * @param options Object to refine when callback is invoked.\n * @param options.options Parameter to specify options passed to the eventListener.\n * @param options.enabled Determines whether or not the useEffect hook should run.\n * @param options.dependencies Array to be passed to useEffect hook, such that the hook will only run if the array's values have changed.\n * @param options.element Value to be passed as target of event handler, will default to document.\n */\nconst useEscapeKey = (callback: () => void, options?: UseEventOptions) => {\n  return useEventListener('keydown', e => handleEscape(e, callback), options);\n};\n\nexport default useEscapeKey;\n","import { useEffect, useLayoutEffect } from 'react';\n\nconst useIsomorphicLayoutEffect: typeof useLayoutEffect = (...args) => {\n  const effectHook =\n    typeof window === 'undefined' ? useEffect : useLayoutEffect;\n  return effectHook(...args);\n};\n\nexport default useIsomorphicLayoutEffect;\n","import { useEffect, useState } from 'react';\n\ntype MutationHandler<Value> = (\n  mutations: Array<MutationRecord>,\n  observer: MutationObserver,\n) => Value;\n\n/**\n * Hook to subscribe to changes on the DOM.\n * @param target HTML element that is subscribed to DOM changes.\n * @param options Object with information about what DOM changes to subscribe to.\n * @param callback Callback function to execute inside of MutationObserver instance.\n * @param enabled Determines whether or not the hook should run, defaults to true.\n */\nexport default function useMutationObserver<Value>(\n  target: HTMLElement | null,\n  options: MutationObserverInit,\n  callback: MutationHandler<Value>,\n  enabled = true,\n): Value | undefined {\n  const [value, setValue] = useState<Value>();\n\n  useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const observer = new MutationObserver((...args) => {\n      setValue(callback(...args));\n    });\n\n    if (target) {\n      observer.observe(target, options);\n    }\n\n    return () => observer.disconnect();\n  }, [target, options, callback, enabled]);\n\n  return value;\n}\n","import { useRef } from 'react';\nimport isEqual from 'lodash/isEqual';\n\nexport default function useObjectDependency<T>(object: T): T {\n  const ref = useRef<T>();\n\n  // we need isEqual for deep object comparison\n  if (ref.current === undefined || !isEqual(ref.current, object)) {\n    ref.current = object;\n  }\n\n  return ref.current;\n}\n","import { useEffect, useRef } from 'react';\n\n/**\n * Hook to store previous props\n * https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nexport default function usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = value;\n  });\n\n  return ref.current;\n}\n"],"names":["useEventListener","type","eventCallback","_ref","arguments","length","undefined","options","_ref$enabled","enabled","_ref$dependencies","dependencies","element","memoizedEventCallback","useRef","useEffect","current","callback","e","eventListenerOptions","_objectSpread","once","document","addEventListener","removeEventListener","console","error","concat","_typeof","getViewportSize","width","window","innerWidth","height","innerHeight","useVisibilityChange","isVisibilityStateVisible","visibilityState","_useState2","_slicedToArray","useState","isVisible","setIsVisible","keyCode","stopImmediatePropagation","handleEscape","effectHook","useLayoutEffect","apply","target","_useState","value","setValue","observer","MutationObserver","observe","disconnect","object","ref","isEqual","onPoll","_ref$interval","interval","_ref$immediate","immediate","savedCallback","isPolling","id","poll","scheduleNextPoll","unscheduleNextPoll","setTimeout","clearTimeout","_savedCallback$curren","Promise","resolve","call","finally","viewportSize","setViewportUpdateVal","calcResize","debounce"],"mappings":"g1EAce,SAASA,EAAiBC,EAAMC,GAC7C,IAAIC,EAAOC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAC3EG,EAAUJ,EAAKI,QACfC,EAAeL,EAAKM,QACpBA,OAA2B,IAAjBD,GAAiCA,EAC3CE,EAAoBP,EAAKQ,aACzBA,OAAqC,IAAtBD,EAA+B,CAACD,EAASR,GAAQS,EAChEE,EAAUT,EAAKS,QAEfC,EAAwBC,UAAO,eACnCC,aAAU,WACRF,EAAsBG,QAAUd,IAC/B,CAACA,IACJa,aAAU,WACR,IAAgB,IAAZN,EAAJ,CAKA,GAAgB,SAAZA,IAAkC,IAAZA,EAA1B,CAKA,IAAIQ,EAAW,SAAkBC,GAC/B,OAAOL,EAAsBG,QAAQE,IAGnCC,EAAuBC,EAAc,GAAIb,EAAS,CACpDc,KAAkB,SAAZZ,IAKR,OADCG,MAAAA,EAAyCA,EAAUU,UAAUC,iBAAiBtB,EAAMgB,EAAUE,GACxF,YACJP,MAAAA,EAAyCA,EAAUU,UAAUE,oBAAoBvB,EAAMgB,EAAUE,IAflGM,QAAQC,MAAM,0BAA0BC,OAAOC,EAAQnB,GAAU,oDAiBlEE,GC/CL,SAASkB,IACP,MAAO,CACLC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,aCHnB,SAASC,IACP,IAAIC,EAA2B,WAC7B,MAAoC,YAA7Bd,SAASe,iBAIdC,EAAaC,EADDC,YAAS,GACkB,GACvCC,EAAYH,EAAW,GACvBI,EAAeJ,EAAW,GAQ9B,OANAvB,aAAU,WACR2B,EAAaN,KACZ,IACHpC,EAAiB,oBAAoB,WACnC0C,EAAaN,MAERK,iBCAU,SAAsBxB,EAAUV,GACjD,OAAOP,EAAiB,WAAW,SAAUkB,GAC3C,OAnBe,SAAsBA,EAAGD,GAFxB,KAGdC,EAAEyB,UACJzB,EAAE0B,2BACF3B,KAgBO4B,CAAa3B,EAAGD,KACtBV,qDCrB2B,WAC9B,IAAIuC,EAA+B,oBAAXf,OAAyBhB,YAAYgC,kBAC7D,OAAOD,EAAWE,WAAM,EAAQ5C,kCCMnB,SAA6B6C,EAAQ1C,EAASU,GAC3D,IAAIR,IAAUL,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,KAAmBA,UAAU,GAEzE8C,EAAYV,aACZF,EAAaC,EAAeW,EAAW,GACvCC,EAAQb,EAAW,GACnBc,EAAWd,EAAW,GAmB1B,OAjBAvB,aAAU,WACR,GAAKN,EAAL,CAIA,IAAI4C,EAAW,IAAIC,kBAAiB,WAClCF,EAASnC,EAAS+B,WAAM,EAAQ5C,eAOlC,OAJI6C,GACFI,EAASE,QAAQN,EAAQ1C,GAGpB,WACL,OAAO8C,EAASG,iBAEjB,CAACP,EAAQ1C,EAASU,EAAUR,IACxB0C,yBCjCM,SAA6BM,GAC1C,IAAIC,EAAM5C,WAMV,YAJoBR,IAAhBoD,EAAI1C,SAA0B2C,UAAQD,EAAI1C,QAASyC,KACrDC,EAAI1C,QAAUyC,GAGTC,EAAI1C,qBJcE,SAAmB4C,GAChC,IAAIzD,EAAOC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAC3EyD,EAAgB1D,EAAK2D,SACrBA,OAA6B,IAAlBD,EAA2B,IAAOA,EAC7CE,EAAiB5D,EAAK6D,UACtBA,OAA+B,IAAnBD,GAAmCA,EAC/CvD,EAAeL,EAAKM,QACpBA,OAA2B,IAAjBD,GAAiCA,EAE3CyD,EAAgBnD,WAChB2B,EAAYN,IACZ+B,EAAYzB,GAAahC,EAC7BM,aAAU,WACRkD,EAAcjD,QAAU4C,KAE1B7C,aAAU,WAQR,IAAIoD,EAPJ,GAAKD,EA8BL,OANIF,EACFI,IAEAC,IAGKC,EArBP,SAASD,IACPC,IACAH,EAAKI,WAAWH,EAAMN,GAGxB,SAASQ,IACPE,aAAaL,GAGf,SAASC,IACP,IAAIK,EAEJC,QAAQC,QAA4D,QAAnDF,EAAwBR,EAAcjD,eAA+C,IAA1ByD,OAAmC,EAASA,EAAsBG,KAAKX,IAAgBY,QAAQR,MAU5K,CAACP,EAAUE,EAAWE,mBKhEZ,SAAqBf,GAClC,IAAIO,EAAM5C,WAIV,OAHAC,aAAU,WACR2C,EAAI1C,QAAUmC,KAETO,EAAI1C,2BNAE,WACb,IACIsB,EAAaC,EADDC,WAAS,MACkB,GACvCsC,EAAexC,EAAW,GAC1ByC,EAAuBzC,EAAW,GAYtC,OAVAvB,aAAU,WACRgE,EAAqBlD,KACrB,IAAImD,EAAaC,WAAS,WACxB,OAAOF,EAAqBlD,OAC3B,KAEH,OADAE,OAAOR,iBAAiB,SAAUyD,GAC3B,WACL,OAAOjD,OAAOP,oBAAoB,SAAUwD,MAE7C,IACIF"}